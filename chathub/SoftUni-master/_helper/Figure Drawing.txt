int n = int.Parse(Console.ReadLine());

string d0, d1, d2, d3;
int d0Width, d1Width, d2Width, d3Width;

d0Width = n / 2;
d1Width = 1;
d0 = new string('-', d0Width);
d1 = new string('*', d1Width);
Console.WriteLine("{0}{1}", d0,d1);

d0Width = n/2;
d1Width = 1;
d2Width = n;
while (d1Width<=n)
{
	d0 = new string('-', d0Width);
	d1 = new string('*', d1Width);
	d2 = new string('-', d2Width);
	Console.WriteLine("{0}{1}{2}{1}{0}", d0, d1,d2);
	d0Width -= 1;
	d1Width += 2;
	d2Width -= 2;
}

d0 = new string('.', n);
d1 = new string('#', n);
Console.WriteLine("{0}{1}{0}", d0, d1);

for (int i = 0; i < n/2; i++)
{
	d0 = new string('.', n - (2 * (i+1)));
	d1 = new string('.', 2 * i);
	d2 = new string('.', n-2);
	Console.WriteLine("{0}##{1}#{2}#{1}##{0}", d0,d1,d2);
}
//reversing the above image
for (int i = (n / 2)-1; i >=0; i--)
{
	d0 = new string('.', n - (2 * (i + 1)));
	d1 = new string('.', 2 * i);
	d2 = new string('.', n - 2);
	Console.WriteLine("{0}##{1}#{2}#{1}##{0}", d0, d1, d2);
}



