// read input
ulong[] num = new ulong[8];
for (int i = 0; i < 8; i++)
{
	num[i] = ulong.Parse(Console.ReadLine());
}

// flip bit N
bit ^= (1 << N);

//copy bit from one ulong to a new all-zero ulong
ulong currentBit = number & (1UL << i);
outputNumber |= currentBit;

// set bit to one
ulong number;
private static void SetBitToOne(int bit)
{
	number = number | ((ulong)1 << bit);
}

// set bit to zero
ulong number;
private static void SetBitToZero(int bit)
{
	number = number & ~((ulong)1 << bit);
}

//traverse in reverse and show bits values
private static void Show(ulong number)
{   
	for (int i = (64 - 1); i >= 0; i--)
	{
		Console.Write((number>>i)&1);
		
		if (i%10==0)
		{
			Console.Write(" ");
		}		
	}
	Console.WriteLine();
}

private static ulong InsertBit(ulong n,int position)
{
	ulong m = 0;

	for (int i = 0; i < position; i++)
	{
		m |= n & (1UL << i);
	}
	m |= 1UL << position;

	for (int i = position; i < 63; i++)
	{
		m |= (n & (1UL << i)) << 1;
	}
	n = m;
	
	return n;
}

private static ulong RemoveBit(ulong n,int position)
{
	ulong m = 0;

	for (int i = 0; i < position; i++)
	{
		m |= n & (1UL << i);
	}

	for (int i = position + 1; i < 64; i++)
	{
		m |= (n & (1UL << i)) >> 1;
	}
	n = m;
	
	return n;
}


//reverse bits order
private static void ReverseBitsOrder()
{
	ulong b=0;
	for (int i = 0; i < 64; i++)
	{
		currentBit = ((num >>i)& 1UL )<<(64-1-i);
		b |= currentBit;
	}
	num = b;
}

// traverse binary matrix in diagonal and set each position to 1
private static void fillLeftUp(int row, int rcol)
{
	for (; (row >= 0) && (rcol < n); row--, rcol++)
	{
		board[row] |= (1 << rcol);
	}
}
private static void fillLeftDown(int row, int rcol)
{
	for (; (row <n) && (rcol < n); row++, rcol++)
	{
		board[row] |= (1 << rcol);
	}
}
private static void fillRighttUp(int row, int rcol)
{
	for (; (row >= 0) && (rcol >= 0); row--, rcol--)
	{
		board[row] |= (1 << rcol);
	}
}
private static void fillRightDown(int row, int rcol)
{
	for (; (row < n) && (rcol >=0); row++, rcol--)
	{
		board[row] |= (1 << rcol);
	}
}

// Swap two groups of 4 bits between two numbers
//-------------------------------------------------
// mask of the positions of the two groups to swap
ulong fromMask = 15u << pos1 * 4;
ulong toMask = 15u << pos2 * 4;
// copy the groups from the numbers
ulong fromBits = (n[num1] & fromMask) >> pos1 * 4;
ulong toBits = (n[num2] & toMask) >> pos2 * 4;
// zeroing the two groups in the numbers
n[num1] &= ~fromMask;
n[num2] &= ~toMask;
// swap paste the two groups in the numbers
n[num1] |= toBits << pos1*4;
n[num2] |= fromBits << pos2*4;

// split friends and alone bits in two separate numbers
bool[] neibhors = new bool[32];
for (int i = 1; i < 32; i++)
{
	// if current and previous are same bits, set bools to true
	if (((n >> i) & 1u) == ((n >> (i - 1)) & 1u))
	{
		neibhors[i] = true;
		neibhors[i - 1] = true;
	}
}
uint friends = 0, alone = 0;
int fIndex = 0, aIndex = 0;
for (int i = 0; i < neibhors.Length; i++)
{   // copy true to friends, false to alone
	if (neibhors[i] == true)
	{
		friends |= ((n >> i) & 1u)<<fIndex;
		fIndex++;
	}
	else
	{
		alone |= ((n >> i) & 1u) << aIndex;
		aIndex++;
	}
}